source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
x[1,]
x[],]
x[,]
x[,1]
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
x[,1]
padroniza(x[,1])
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
x
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
print(paste( "Erro quadrado médio do treino, " ,mean(sqrt((y-predict(RedeCA, x))^2))))
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
print(paste( "Erro quadrado médio do treino, " ,mean(sqrt((y[indicesDeTeste1]-predict(RedeCA, x[indicesDeTeste1,]))^2))))
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
inputTeste
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
dados$Area
unique(y)
length(unique(y))
length(dados)
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
x
x <- dados[,-length(dados)] # retira a classificação
x
x[,3]/x[,3]
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
inputTeste
inputTeste =  c( #input que eu usei em python
x[,1],
x[,2]/x[,5],
x[,3]/x[,5],
x[,4]/x[,5],
x[,2]/x[,4],
x[,2]/x[,3],
x[,4]/x[,3]
)
inputTeste
x[,1]
inputTeste - x[,1]
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
inputTeste
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
inputTeste
padroniza(inputTeste)
padroniza(inputTeste[,1])
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
View(inputTeste)
View(inputTeste)
typeof(inputTeste)
typeof(inputTeste[,1])
typeof(inputTeste[,2])
typeof(inputTeste[,3])
typeof(inputTeste[,\4])
typeof(inputTeste[,4])
typeof(inputTeste[,5])
typeof(inputTeste[,6])
typeof(inputTeste[,7])
print(inputTeste[,1])
print(inputTeste[1,])
typeof(inputTeste[,8])
typeof(inputTeste[,7])
for (i in seq(1,length(inputTeste))) {
typeof(inputTeste[,i])
}
for (i in seq(1,length(inputTeste))) {
typeof(inputTeste[,i])
}
for (i in seq(1,length(inputTeste))) {
print(typeof(inputTeste[,i]))
}
RedeCA<-mlp(inputTeste[indicesDeTreino,], y[indicesDeTreino], size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.051), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
plot(RedeCA$IterativeFitError,type="l",main="Erro da MLP CA")
print(paste( "Erro quadrado médio do treino, " ,mean(sqrt((y[indicesDeTreino]-predict(RedeCA, x[inputTeste,]))^2))))
print(paste( "Erro quadrado médio do treino, " ,mean(sqrt((y[indicesDeTreino]-predict(RedeCA, inputTeste[indicesDeTreino,]))^2))))
y[indicesDeTreino]-predict(RedeCA, inputTeste[indicesDeTreino,]
print(y[indicesDeTreino]-predict(RedeCA, inputTeste[indicesDeTreino,])
print(y[indicesDeTreino]-predict(RedeCA, inputTeste[indicesDeTreino,]))
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
dev.li
dev.list
dev.list()
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
length(dev.list())
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
confusion.matrix(y[indicesDeTreino,],predict(RedeCA2, inputTeste[indicesDeTreino,])
5
confusion.matrix(y[indicesDeTreino,],predict(RedeCA2, inputTeste[indicesDeTreino,]))
confusion.matrix(y[indicesDeTreino],predict(RedeCA2, inputTeste[indicesDeTreino,]))
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
y
x
RedeCa <- NULL
RedeCA<-mlp(x[indicesDeTreino,], y[indicesDeTreino], size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.051), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
x
x[indicesDeTreino]
x[indicesDeTreino,]
indicesDeTreino
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
indicesDeTreino
debugSource('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
i
i in y
y
unique(y)
debugSource('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
i
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
indicesDeTreino
x
RedeCa <- NULL
RedeCA<-mlp(x[indicesDeTreino,], y[indicesDeTreino], size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.051), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
indicesDeTreino
y
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
install.packages("AppliedPredictiveModeling")
install.packages("caret")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
#limpar workspace
rm(list=ls())
library("RSNNS")
library(SDMTools)
#limpar tela
cat('\014')
if(length(dev.list()) != 0){
dev.off()
}
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
featurePlot(x = iris[, 1:4],
y = iris$Species,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
iris
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
dados
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
y
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
#limpar workspace
rm(list=ls())
library("RSNNS")
library(SDMTools)
#limpar tela
cat('\014')
if(length(dev.list()) != 0){
dev.off()
}
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
dados <- read.table(
"output.csv",
header=T,
sep=",",
colClasses=c(rep("numeric",5), "character")
)
x <- dados[,-length(dados)] # retira a classificação
y <- dados$Classe # classificaçao
featurePlot(x,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
str(dados)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
#limpar workspace
rm(list=ls())
library("RSNNS")
library(SDMTools)
#limpar tela
cat('\014')
if(length(dev.list()) != 0){
dev.off()
}
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
dados <- read.table(
"output.csv",
header=T,
sep=",",
colClasses=c(rep("numeric",5), "character")
)
x <- dados[,-length(dados)] # retira a classificação
y <- factor(dados$Classe) # classificaçao
featurePlot(x,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
#limpar workspace
rm(list=ls())
library("RSNNS")
library(SDMTools)
#limpar tela
cat('\014')
if(length(dev.list()) != 0){
dev.off()
}
library(AppliedPredictiveModeling)
transparentTheme(trans = .4)
library(caret)
dados <- read.table(
"output.csv",
header=T,
sep=",",
colClasses=c(rep("numeric",5), "character")
)
x <- dados[,-length(dados)] # retira a classificação
y <- factor(dados$Classe) # classificaçao
featurePlot(x,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
iris
inputTeste =  data.frame( #input que eu usei em python
x[,1],
x[,2]/x[,5],
x[,3]/x[,5],
x[,4]/x[,5],
x[,2]/x[,4],
x[,2]/x[,3],
x[,4]/x[,3]
)
featurePlot(inputTeste,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
featurePlot(inputTeste,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(x,
y,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
featurePlot(inputTeste,
y,
plot = "ellipse",
## Add a key at the top
auto.key = list(columns = 3))
5
list(columns = 2)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
featurePlot(x,
y,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
layout = c(4,1 )
featurePlot(x,
y,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(4,1 ),
auto.key = list(columns = 2))
featurePlot(x,
y,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(5,1 ),
auto.key = list(columns = 2))
gerarGraficos <- function(input, expected){
featurePlot(input,
expected,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
}
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
#limpar workspace
rm(list=ls())
library("RSNNS")
library(SDMTools)
#limpar tela
cat('\014')
if(length(dev.list()) != 0){
dev.off()
}
library(AppliedPredictiveModeling)
library(caret)
dados <- read.table(
"output.csv",
header=T,
sep=",",
colClasses=c(rep("numeric",5), "character")
)
x <- dados[,-length(dados)] # retira a classificação
inputTeste =  data.frame( #input que eu usei em python
x[,1],
x[,2]/x[,5],
x[,3]/x[,5],
x[,4]/x[,5],
x[,2]/x[,4],
x[,2]/x[,3],
x[,4]/x[,3]
)
colnames(inputTeste) <- c("Area", "%Elipse", "%Rec", "%Circle", "E/C", "E/R", "C/R")
y <- factor(dados$Classe) # classificaçao
gerarGraficos <- function(input, expected, nome){
transparentTheme(trans = .4)
featurePlot(input,
expected,
plot = "pairs",
## Add a key at the top
auto.key = list(columns = 3))
featurePlot(input,
expected,
plot = "box",
## Pass in options to bwplot()
scales = list(y = list(relation="free"),
x = list(rot = 90)),
layout = c(5,1 ),
auto.key = list(columns = 2))
transparentTheme(trans = .9)
featurePlot(x = input,
y = expected,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 2),
auto.key = list(columns = 3))
}
gerarGraficos(x,y)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
featurePlot(x,
y,
plot = "density",
## Pass in options to xyplot() to
## make it prettier
scales = list(x = list(relation="free"),
y = list(relation="free")),
adjust = 1.5,
pch = "|",
layout = c(4, 2),
auto.key = list(columns = 3))
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
gerarGraficos(inputTeste,y, "input teste")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
auto.key = list(columns = 3))
5
asdok
options
options(warn)
getOption("warn")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
RedeCA<-mlp(x[indicesDeTreino,], y[indicesDeTreino], size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.051), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
source('E:/escola/ciniro/TEEC/artigo final/cafes/classificar.R')
RedeCA<-mlp(x[indicesDeTreino,], y[indicesDeTreino], size=nNeuronios, maxit=maxEpocas, initFunc="Randomize_Weights",
initFuncParams=c(-0.3, 0.3), learnFunc="Std_Backpropagation",
learnFuncParams=c(0.051), updateFunc="Topological_Order",
updateFuncParams=c(0), hiddenActFunc="Act_Logistic",
shufflePatterns=F, linOut=TRUE)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
insta
install.packages("earth")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
head(model.matrix(survived ~ ., data = etitanic))
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
head(model.matrix(survived ~ ., data = etitanic))
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
View(etitanic)
cor
cor(etitanic)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
cor(etitanic)
mdrr
data(mdrr)
View(mdrrDescr)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
nzv[nzv$nzv,][1:10,]
nzv[nzv$nzv,]
nzv[nzv,]
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
dim(mdrrDescr)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
dim(mdrrDescr)
dim(filteredDescr)
descrCor <-  cor(filteredDescr)
highCorr <- sum(abs(descrCor[upper.tri(descrCor)]) > .999)
descrCor <- cor(filteredDescr)
summary(descrCor[upper.tri(descrCor)])
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
View(schedulingData)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
pp_hpc
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
head(transformed)
View(transformed)
View(schedulingData)
pp_hpc <- preProcess(schedulingData[, -8],
method = c("center", "scale", "YeoJohnson"))
pp_hpc
schedulingData[, -8]
mean(schedulingData$NumPending == 0)
pp_hpc
pp_hpc$dim
pp_hpc$bc
pp_hpc$yj
pp_hpc$et
pp_hpc$ranges
pp_hpc$invHyperbolicSine
pp_hpc$knnSummary()
pp_hpc$wildcards
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
install.packages("mlbench")
data(Sonar)
str(Sonar[, 1:10])
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
View(Sonar)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
inTraining
training <- Sonar[ inTraining,]
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
install.packages("gbm")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
install.packages("e1071")
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
gbmFit1
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
predict(gbmFit1, testing)
predict(gbmFit\1, newdata = head(testing), type = "prob")
predict(gbmFit1, newdata = head(testing), type = "prob")
testin\g
testing
predict(gbmFit1, testing) == testing$Class
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
5
print(predict(gbmFit1, testing) == testing$Class)
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
install.packages("doMC")
5
install.packages("doMC")
5
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
source('E:/escola/ciniro/TEEC/artigo final/cafes/teste.R')
install.packages(c("car", "dplyr", "htmlwidgets", "httpuv", "lme4", "lmtest", "MASS", "miniUI", "pillar", "psych", "R.oo", "shiny", "sourcetools", "stringi", "stringr", "survival", "tidyr", "yaml"), lib="E:/R/R-3.5.0/library")
